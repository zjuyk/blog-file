[{"categories":null,"content":"我曾经很喜欢收集一些有用的资源，尤其在我认真思索如何搜索到合适的资源之后。但当我在收藏夹又顺手加入一个 awesome 前缀的 github 仓库时，我突然愣住了。回望收藏夹，东西好多呀，但我真正读过的东西又占多少呢？ 我收藏了，但是我并没有学到东西！我像一只仓鼠收藏着觉得好吃的坚果，但吃东西才是我的初衷，收藏并不是。经过反思，接下来的时间我要停一停，做一点磨刀的事情。 ","date":"2021-09-25","objectID":"/posts/collect-but-do-not-read/:0:0","tags":["learn","collection","read"],"title":"只收藏却不阅读","uri":"/posts/collect-but-do-not-read/"},{"categories":null,"content":" 分类归纳我的收藏夹主要有三个地方，我的 Telegram 私人频道、火狐浏览器书签和 Onedrive 网盘。 前者是我收藏夹的核心，这里面主要是我收藏的有用的轮子、别人优秀的配置和我对一些问题的解决方案。我浏览器的书签分为两种，一种是常用的入口，例如 Arch Wiki、Gentoo Wiki 以及我常用的 B 站等，这部分我放在书签栏。另一种是临时需要查看的标签页，它们通常是一组页面，如果这是我过段时间需要查看而且只需要查看一次的东西，我会把他们临时归档到 onetab 一并先收藏起来，例如我写代码时开启的多个文档页面。 如果这是我一段时间的日常任务我会把它们放到 Reading List 里保存，例如我日常做的翻译工作 tldr。 对于一些大文件，我会存放到 Onedrive 网盘，例如比较触动我的电影、我喜欢看的书籍和音乐壁纸等等。 ","date":"2021-09-25","objectID":"/posts/collect-but-do-not-read/:1:0","tags":["learn","collection","read"],"title":"只收藏却不阅读","uri":"/posts/collect-but-do-not-read/"},{"categories":null,"content":" 懂得取舍收藏的东西可以无限，因为电子资源在当今这个时代已经越来越丰富了。我现在要做的事情就是把没必要的东西刨除出去，我的精力是有限的，没办法全都仔仔细细去看，不在我 todolist 里的东西我会把它们放在角落里吃灰，因为它们对现在的我并无价值，如果时间充裕我也会尝试去把过时的收藏项移除。 ","date":"2021-09-25","objectID":"/posts/collect-but-do-not-read/:2:0","tags":["learn","collection","read"],"title":"只收藏却不阅读","uri":"/posts/collect-but-do-not-read/"},{"categories":null,"content":" 沉淀积累看了不代表懂了，那些还是别人的东西。那些轮子很好用，那我为什么不尝试用他们做出点小作品出来？别人的优秀配置很好，我也可以学着捏一份自己的。还有我看过的有感触的电影，不妨写几篇影评。至于我喜欢看的书，写书评倒还不在我的计划之内，因为我有做标注的习惯。 ","date":"2021-09-25","objectID":"/posts/collect-but-do-not-read/:3:0","tags":["learn","collection","read"],"title":"只收藏却不阅读","uri":"/posts/collect-but-do-not-read/"},{"categories":null,"content":" 坚持不懈给懒惰的自己再敲个警钟，前面说了那么多，坚持不下来都是白费功夫，持之以恒才能见成效，诸君共勉～ ","date":"2021-09-25","objectID":"/posts/collect-but-do-not-read/:4:0","tags":["learn","collection","read"],"title":"只收藏却不阅读","uri":"/posts/collect-but-do-not-read/"},{"categories":null,"content":"如果是对我有所关注的小伙伴，会发现我之前曾经写过一份 mpv 配置，这一份是在我速成了 lua 后的升级版，其中包含对 mpv 0.33 版本大改的对应修正。 ","date":"2021-09-08","objectID":"/posts/mpv-config/:0:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 1. 成果展示 配置目录结构如下： . ├── input.conf ├── mpv.conf ├── script-modules │ ├── file-browser-addons │ │ ├── addons.md │ │ ├── apache-browser.lua │ │ ├── favourites.lua │ │ ├── ftp-browser.lua │ │ ├── home-label.lua │ │ ├── ls.lua │ │ ├── m3u-browser.lua │ │ ├── powershell.lua │ │ └── README.md │ └── user-input-module.lua ├── script-opts │ ├── file_browser.conf │ ├── file-browser-keybinds.json │ ├── mpv_crop_script.conf │ └── osc.conf └── scripts ├── assrt.lua ├── autoload.lua ├── file-browser.lua ├── morden.lua ├── mpv_crop_script.lua ├── recent.lua └── user-input.lua ","date":"2021-09-08","objectID":"/posts/mpv-config/:1:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 2. 基本配置这一部分在 ~/.config/mpv/mpv.conf 中设置 ","date":"2021-09-08","objectID":"/posts/mpv-config/:2:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 2.1 硬件加速在 archwiki 有很详细的介绍，这里就不赘叙了。配好 vaapi 之后在配置文件中加入 # Hardware video acceleration vo=gpu hwdec=vaapi ","date":"2021-09-08","objectID":"/posts/mpv-config/:2:1","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 2.2 截图设置我有时候需要给视频快速截图，这是 mpv 内置的功能 # Screenshot config screenshot-directory=\"~/Pictures\" screenshot-format=png screenshot-tag-colorspace=yes screenshot-high-bit-depth=yes screenshot-template=\"%F-%{estimated-frame-number:%P}\" ","date":"2021-09-08","objectID":"/posts/mpv-config/:2:2","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 2.3 其他设置mpv 的参数之多是出了名的，我只挑选了一些常用的设置，详细参考 官方文档 # save last position save-position-on-quit # keep open when video ends keep-open # remove osd and border no-osd-bar no-border # remove osc for morden.lua osc=no # autoload subtitle with the same name (builtin) sub-auto=fuzzy ","date":"2021-09-08","objectID":"/posts/mpv-config/:2:3","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 3. 额外插件 播放历史 recent.lua 注意默认触发按键是 “`” ，这和 console 冲突，我目前是使用 TAB 来触发 文件列表 file-browser 建议使用 user-input.lua 快速打开文件夹，你只需要按 alt+o 输入路径就能打开一个文件列表了！默认 autoload 是关闭的，这非常合理，毕竟我单独打开文件夹就不是想播放所有的文件 更现代的播放栏 morden.lua 链接里是我的修改版，我还有一些新的想法或许未来会去调整。你说它到底现代在哪？它使用了更现代的 material design 符号字体（x 区域截图 mpv_crop_script.lua 这个脚本使用了预计要被移除的 tick 事件，我会在之后改写。我虽然设置了全局截图，但那只能截取整个界面，有时候我想截取某个区域，这个脚本就派上了用场 字幕搜索加载 assrt.lua 这个脚本目前是从 assrt.net 来获取字幕的，电影相关的字幕很多，但是美剧之类的会差一些，我目前没什么需求，以后或许会考虑加点其他的源 ","date":"2021-09-08","objectID":"/posts/mpv-config/:3:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 4. 总结这份配置需要记忆一定的快捷键，如果你更喜欢点点点，那可能不大适合你。 ","date":"2021-09-08","objectID":"/posts/mpv-config/:4:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":" 5. 链接 dotfiles mpv userscripts ","date":"2021-09-08","objectID":"/posts/mpv-config/:5:0","tags":["mpv","lua","script"],"title":"配置一个顺手的 MPV 播放器","uri":"/posts/mpv-config/"},{"categories":null,"content":"前些日子看到 firefox 流失近 5000 万用户量的新闻时悚然一惊，我之前也因为之前火狐长期不活动会卡死的 bug 跑到了 chrome 避难，没成想火狐已经到了这个地步。在长期不活动卡死的问题修复后我又回到了火狐，但正好遇上 90 版本 UI 大改，新的界面设计确实有点劝退人，好在火狐优点之一就是定制化，花了点心思弄了个合用的界面，下面就介绍一下我的具体操作步骤并附上我的插件配置。 ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:0","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 1 实现效果没图没真相，还是先来张效果图 注：我是平铺用户，没有最大化和最小化这样的操作习惯，如果你有的话不建议完全照搬我的配置 ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:1","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 2 实现流程 2.1 移除标题栏标题栏是个可有可无的东西，作为平铺用户我并不愿意它挤占屏幕高度。 在 kde 上你可以通过 window rules 匹配火狐的 window class 将窗口边框去除，如下添加 No titlebar and frame 属性： 不过注意这样移除边框后就没窗口阴影了（我并不需要这个 如果你和我一样是使用平铺窗口管理器的话，直接在对应的配置文件设置去除边框就行。另外还有使用平铺脚本的用户可以在对应的脚本管理界面勾选去除窗口边框，以 kwin-tiling 这个脚本举例： 2.2 引用外部样式众所周知，firefox 允许加载外部 css 来进行定制化。如果你自己 css 能力比较强而且时间充裕可以按照官方文档来自己定制。我并没有自己花太多时间去具体设计，而是选择在 Firefox-Elegant-NordTheme 基础上进行修改，我认为他的调色很符合我的审美。 先在 about:config 允许火狐加载外部样式。 将 toolkit.legacyUserProfileCustomizations.stylesheets 设为 true，然后按照上面那个项目的说明在火狐配置目录下新建 chrome 文件夹并放入 css 文件，目录树如下： chrome/ |- userChrome.css |- userContent.css |- userColors.css ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:2","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 3 自定义调整 3.1 移除标签栏虽然我对那份配置的调色已算满意，但是默认的效果如下： 可以明显发现标签栏的高度实在是有点过了，而且右边的留空极其难看，我本身是 treestyletab 用户，于是准备直接采用垂直标签栏。 #titlebar #TabsToolbar { padding: 6px 0px 2px 6px !important; background: var(--base_color1) !important; visibility: collapse; } 在 #TabsToolbar 下加上 visibility: collapse; 便可以关掉水平标签。 3.2 定制垂直标签栏对于 treestyletab 推荐采用 proton 主题，然后建议采用和火狐主题对应的颜色，我的 css 如下： :root { --theme-colors-button_active: rgb(0, 221, 255); } #background { background: #2e3440 !important; } tab-item-substance { border: solid 1px #00000012; } tab-item.active .background { background-color: steelblue; } tab-item.active .label-content { font-weight: bold; font-size: 14px; } tab-item.active tab-twisty, tab-item.active .label-content, tab-item.active tab-counter { color: #fff; } tab-item:not(.active) .background { background-color: #3b4252; } tab-item:not(.active) .label { color: #ffff !important; } tab-item tab-item-substance:hover { background: #5A89B7 !important; } .newtab-button { background: #2e3440 !important; } 你可以根据 官方文档 来进一步定制 3.3 额外小技巧移除 treestyletab Header，也就是侧边栏上面那个切换头 在 userChrome.css 加上 /* only remove TST headers */ #sidebar-box[sidebarcommand=\"treestyletab_piro_sakura_ne_jp-sidebar-action\"] #sidebar-header { display: none; /* remove sidebar header */ border-color: var(--base_color2) !important; } 设置垂直标签栏悬浮显示，也就是默认贴边变小，鼠标悬浮弹出 在 userChrome.css 加上 /* The default sidebar width. */ #sidebar-box { overflow: hidden!important; position: relative!important; transition: all 100ms!important; min-width: 40px !important; max-width: 300px !important; } /* The sidebar width when hovered. */ #sidebar-box #sidebar,#sidebar-box:hover { transition: all 100ms!important; min-width: 300px !important; max-width: 300px !important; } 设置侧边栏分隔线宽度 在 userChrome.css 加上 .sidebar-splitter { /* display: none; remove sidebar split line */ min-width: 1px !important; max-width: 1px !important; border-color: var(--base_color2) !important; } ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:3","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 4 我的扩展 SwitchyOmega 代理扩展，懂的都懂 saladict 划词翻译插件，支持 PDF，读论文的福音 Plasma Integration 可以和 KDE 良好的整合在一起， 播放和下载通知与 KDE 嵌合 Tampermonkey 不可或缺的浏览器插件，不管是用其他人的脚本还是自己写用处都极大 Endless Google 搜索引擎不再只有第一页，不用再手动点击下一页了 Google Images direct link 获取谷歌搜索的图片直链 Octotree 在侧边栏显示 github 仓库目录 QR Code 生成和识别二维码 OneTab 暂时保存标签组，适合干活干到一半临时有事的情况 Midnight Lizard 网页配色调整插件，我习惯给网页调配上统一的 nord 配色 Tabliss 用来提供新标签页的插件，在我上面的截图有体现 User-Agent Switcher and Manager 有时候网站会限制 UA，所以需要用这个插件来切换 Tree Style Tab 这个上面已经重点介绍过了，用来展示树形标签页的 uBlock Origin 广告拦截插件，就我的体验上来说还行 ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:4","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 5 特殊设置 5.1 硬件加速具体参见 Arch wiki 5.2 使用 QT 文件对话框先在 about:config 将 widget.use-xdg-desktop-portal 调成 true，再安装 xdg-desktop-portal{,-kde} 这两个包即可，但注意这会导致火狐一直认为自己不是默认浏览器，所以自己决定。 ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:5","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 6 注意点 目前网页截图在 wayland 下还无法复制 目前 91.02 stable 版本全局菜单还不支持，需要打 patch，可以安装 firefox-appmenu 来临时解决该问题 火狐没有传递当前输入光标位置给 fcitx5 所以开启单行模式会停留在预编辑区首部 而 chrome 是支持的 ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:6","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":" 7 参考和我的配置 我的配置 Firefox-Elegant-NordTheme TreeStyleTab wiki Arch wiki ","date":"2021-08-15","objectID":"/posts/custom-firefox/:0:7","tags":["firefox","linux","kde","css"],"title":"我的火狐配置","uri":"/posts/custom-firefox/"},{"categories":null,"content":"在 wps-office 因为分发许可的原因移出 archlinuxcn 源之后，自建一个 arch repo 的需求就越来越强烈，我之前也搞过 github action 来打 archlinux 的包，但并不能完全满足我的需求，于是我准备大刀阔斧改上一波，并写点脚本辅助自动化打包流程。 这篇文章可能会有点长，因为我打算把我的踩坑过程也写进去，没时间看的可以直接到文末我的仓库链接查看具体实现。 1 需求分析 需求 预计解决方案 定时打包 github action cron 打完的时候通知 telegram bot api 能够打有依赖在 AUR 的包 aur helper yay 打自己修改过的 PKGBUILD 保证目录形式以兼容 aurpublish，以文件夹的形式上传 有一个 web 页面提供单独的下载，因为用户不一定都愿意导入你的 key 目前选用keybase ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:0:0","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2 具体思路首先想到的当然是依云写的 lilac 啦，但我看了看，貌似远远高于我的需求，我只是想打几个类似于 wps-office 这样的包应该用 github action 就能搞定，不过完全可以借鉴思路。 这里顺便提一下两位群友的方案：GitHub Actions 打造 AUR 打包下载一条龙服务 和 利用 GitHub Actions 编译 AUR 包并建立自己的软件源，我接下来的操作和他们有很大的相似之处，只有一些具体细节并不相同。 ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:0","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2.1 解决 docker 权限问题makepkg 和 yay 因为安全原因不允许在 root 下运行。这是有点糟心的，docker 默认不就是 root 么，群友 DuckSoft 提供了一个 dirty hack 来让 makepkg 在 root 下运行 sed -i '/E_ROOT/d' /usr/bin/makepkg 这下好了，可以打没有依赖在 AUR 的包了，就像下面三行就完事了 # entrypoint.sh git clone \"https://aur.archlinux.org/$1.git\" cd \"$1\" makepkg -sf --noconfirm 但是 yay 还是不能在 root 下运行，于是乎想到新建一个没有密码的普通用户然后通过解析 .SRCINFO 来递归安装依赖，这是 edlanglois/pkgbuild-action 的做法。 # Extract dependencies from .SRCINFO (depends or depends_x86_64) and install mapfile -t PKGDEPS \u003c \\ \u003c(sed -n -e 's/^[[:space:]]*\\(make\\)\\?depends\\(_x86_64\\)\\? = \\([[:alnum:][:punct:]]*\\)[[:space:]]*$/\\3/p' .SRCINFO) sudo -H -u builder yay --sync --noconfirm \"${PKGDEPS[@]}\" 我具体看了看他的实现，感觉做法过于复杂了，而且在 root 下采用 sudo -u 还要额外考虑传递环境变量的问题。难道就没有一个内置 yay 并默认是普通用户的 docker 上游吗？ 嗯，终于等到你 martynas/archlinux，它内置了 yay 用来构建 AUR 包并且有个默认的名为 build 的 passwordless 用户，事情瞬间变得简单多了，这里是我写的 pkgbuild-aur。 ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:1","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2.2 同时管理自己修改过的 PKGBUILD 和 AUR为了能够同时方便的使用 aurpublish 来管理我自己手里的 AUR 包，我采用了以下的目录要求 # there should be a subdirectory with the same name of pkgname to satisfy `aurpublish` if [[ ! -d $pkgbuild_dir ]]; then echo \"$pkgbuild_dir should be a directory.\" exit 1 fi if [[ ! -e $pkgbuild_dir/PKGBUILD ]]; then echo \"$pkgbuild_dir does not contain a PKGBUILD file.\" exit 1 fi if [[ ! -e $pkgbuild_dir/.SRCINFO ]]; then echo \"$pkgbuild_dir does not contain a .SRCINFO file.\" exit 1 fi 需要在项目根目录下放置与包同名的文件夹，同时里面要包含 PKGBUILD 和 .SRCINFO，后者是 AUR web 的必须要求同时也用来解析依赖，可以通过 makepkg --printsrcinfo \u003e .SRCINFO 来生成。 同时要注意最好先改一下目录权限，据说 /github/workspace 默认 owner 是 root，所以推荐如下改动。 # fix directory permissions sudo chown -R build \"$pkgbuild_dir\" sudo chown -R build /github/home ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:2","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2.3 定时打包以及完成之后通知我首先 github action 就支持 cron 定时，详见文档，作为一名良心资本家，我允许它周末休息，遵循 996 每天只干两次活。 on: push: branches: - master schedule: - cron: '0 9,21 * * 1-6' # build pkgs via 996 rules (；′⌒`) workflow_dispatch: # allow manual trigger 当然我开启了每次 push 运行和手动开启运行 CI 以便随时压榨（ github action 失败的话会有邮件提醒，但为了维护自己的个人源在 build 成功的时候我也需要提醒。这时候 oldherl 提醒了我，为什么不试试 telegram bot api 呢？这着实是个好主意，我翻查了一下文档，究极简单，以后提醒不用邮件了，全改用 telegram，顺便推荐比较完善的 telegram-action。 ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:3","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2.4 打包之后的存放位置首选当然是 github release 啦，我预想是将 github release 当成一个 archive repo，里面存放着前几个版本的包。Arch 是滚动更新的，自己的个人源自然只放最新的版本包，我目前选用的是 keybase，因为它提供 250 G 免费直链网盘和一个免费二级域名（这不就巧了么，正好符合需求），于是我写了个 repo-helper 方便使用 #!/usr/bin/bash # Usage: # ./repo-helper add \u003cpkg_file_name\u003e # add package # ./repo-helper remove \u003cpkgname\u003e # remove package # ./repo-helper list # list packages in repo # ./repo-helper pull # download packages from personal github release repo_name=\"zjuyk\" repo_ext=\".db.tar.gz\" repo_dir=\"/run/user/1000/keybase/kbfs/public/$repo_name/x86_64/\" github_release_url=\"https://api.github.com/repos/zjuyk/repo/releases/latest\" db_path=$repo_dir$repo_name$repo_ext case $1 in pull) echo \"Pull update from github release...\" curl -s $github_release_url | \\ grep browser_download_url | \\ cut -d : -f 2,3 | \\ tr -d \\\" | \\ xargs -n 1 curl -O -sSL -o $repo_dir -C - repo-add $db_path $repo_dir/*.zst --remove --sign --quiet index-generator --human $repo_dir echo \"Done!\" ;; add) echo \"Add $2 to $repo_name...\" mv -n ./$2 $repo_dir repo-add $db_path $repo_dir/$2 --remove --sign --quiet index-generator --human $repo_dir echo \"Done!\" ;; remove) echo \"Remove $2 from $repo_name...\" repo-remove $db_path $2 index-generator --human $repo_dir echo \"Done!\" ;; list) ls $repo_dir/*.zst | sed 's/-x86_64.pkg.tar.zst//g' | awk -F \"/\" '{print $NF}' ;; *) echo \"args should be one of 'pull', 'add', 'remove' and 'list'!\" esac 脚本中的 index-generator 是 兔兔 他们在几年前用 Jinja 写的，我打算有时间的话用 rust 的 tera 库重构一个。 ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:4","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 2.5 维护更新说到检查版本首先想到的就是依云的 nvchecker 写个配置文件跑一跑，然后改一下包信息就完事了 # bump pkg version in PKGBUILD # update checksums $ updpkgsums # update .SRCINFO $ makepkg --printsrcinfo \u003e .SRCINFO ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:1:5","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 3 不足与改进计划 因为 keybase 非常注重安全性，所以我没办法直接从 github 将产物推到 keybase 上（也许可以，但也会十分复杂，需要专用的工具）。这导致我目前只能半自动化，需要手动 pull release 到运行着 keybase 的机器上同步。虽然可以定时运行，但 keybase 本身的运行会占用一定的资源，我正在考虑是否直接塞到 github repo 里然后开 github pages（属于对 github 的究极滥用，实际上我不会考虑这么做） ArchLinux 除了 x86_64 架构外还额外划分了 any，这个我目前没有考虑，因为目前我并没有维护 any 的包，或许以后会加入 同步是需要消耗流量的，出于未来保留若干版本包用于回滚的考虑，我目前是用 api 把所有的 release 全下下来了，没有做筛选，如果代理流量不够的话建议开一个 cloudflare worker 做反代 ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:2:0","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":" 4 链接 repo keybase pkgbuild-aur ","date":"2021-08-06","objectID":"/posts/personal-archlinux-repo/:3:0","tags":["archlinux","keybase","github action","shell","index-generator"],"title":"自建 ArchLinux 个人源","uri":"/posts/personal-archlinux-repo/"},{"categories":null,"content":"手机上的电影或者图片有时候需要投影到电脑上展示，虽然 DLNA 已经有这么老了，现在无线投屏才是主流，但是由于硬件适配等原因存在着蛮多的问题。我就想着用 kodi 来解决手机无线投屏媒体到电脑的问题。 ","date":"2019-12-26","objectID":"/posts/dlna/:0:0","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":" 1 环境 ArchLinux KDE Kodi ","date":"2019-12-26","objectID":"/posts/dlna/:0:1","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":" 2 安装 $ sudo pacman -S kodi ","date":"2019-12-26","objectID":"/posts/dlna/:0:2","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":" 3 使用 3.1 构建局域网我的无线网卡支持热点，所以直接用 create_ap 脚本来创建一个 wifi sudo create_ap wlo1 ppp0 SSID PASSWORD wlo1: 无线网卡接口名 ppp0： 我是 L2TP 连接的网络，所以是这个接口，你可以换你的有线接口 3.2 开启UPnP在 Settings -\u003e Services -\u003e UPnP 里开启 Allow control of Kodi via UPnP 选项 ","date":"2019-12-26","objectID":"/posts/dlna/:0:3","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":" 4 手机投屏测试手机连接 Wifi，在任意 DLNA 客户端就可以发现电脑设备 Hint： 注意必须先打开 Kodi ","date":"2019-12-26","objectID":"/posts/dlna/:0:4","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":" 参考 UPnP Client Create Ap ","date":"2019-12-26","objectID":"/posts/dlna/:0:5","tags":["dlna","kodi"],"title":"DLNA 服务的搭建","uri":"/posts/dlna/"},{"categories":null,"content":"平常使用的一些命令行工具，整理一下分享出来，大家有好用的也可以推荐一下 1 bat加强版的 cat，可以显示行号并且支持语法高亮 2 htop加强版的 top，可以彩色输出进程信息并提供按键提示，强烈安利 3 neofetch可定制性强，在系统展示方面优于 screenfetch 4 stow备份工具，用于备份和上传自己的用户配置 5 cloc代码统计工具，扩展性也很强，我用来统计大项目的文件 6 figlet+cowsay可以输出好看的艺术字，在自己的脚本里加上这个会更好看 ps：也可以用来做展示 7 tree展示树形目录，做项目描述必备 8 ffmpeg强大的视频工具，用于简单的处理视频比如旋转或格式转换 9 imagemagick强大的照片工具，用于简单的处理图片比如缩放尺寸或去除背景色 10 ripgrep比 grep 更高速的正则匹配工具 11 ydcv命令行版的有道词典翻译工具，还支持划词翻译 12 tldr全称是 too long, don't read，由于 man 页面有时候过长，我们有时候只需要了解几个常用用法，这时候 tldr 就很有用了。 它会列出几个使用样例，方便快速查阅。（由于志愿者还不够多，中文的样例比较少，欢迎大家参与到这个项目中来。 ","date":"2019-12-11","objectID":"/posts/cli-tools/:0:0","tags":["cli","tools"],"title":"命令行工具整理","uri":"/posts/cli-tools/"},{"categories":null,"content":"在 WIN10 系统上是自带 PDF 虚拟打印机的，于是乎文档转 PDF 变得非常容易。在 ArchLinux 上我还装了 WPS 方便日常工作接收的文档的查看和撰写，由于格式的原因通常需要准备一份 PDF 备用，干脆装一下虚拟打印机。 ","date":"2019-12-10","objectID":"/posts/virtual-pdf-printer/:0:0","tags":["pdf","printer"],"title":"PDF 虚拟打印机","uri":"/posts/virtual-pdf-printer/"},{"categories":null,"content":" 1 安装目前使用最广泛的打印系统是 CUPS，它会在本地启动一个名叫 cupsd 的守护进程用来维护打印队列，提供了一个web管理页面（http://localhost:631）。 $ sudo pacman -S cups cups-pdf #安装cups和pdf虚拟打印机 ","date":"2019-12-10","objectID":"/posts/virtual-pdf-printer/:0:1","tags":["pdf","printer"],"title":"PDF 虚拟打印机","uri":"/posts/virtual-pdf-printer/"},{"categories":null,"content":" 2 使用 2.1 启动服务 $ sudo systemctl start cups.service 2.2 开机自启动 $ sudo systemctl enable cups.service 2.3 添加打印机我是KDE用户自带了 print-manager，如果你是其他桌面的话可以通过 web 管理页面自行添加 Hint: 在 Make 里选择 Generic 在 Model 里选择 （w/ option），我之前没选导致打印空白 2.4 修改输出路径默认输出路径在 /var/spool/cups-pdf/${USER}，可以修改 /etc/cups/cups-pdf.conf Out /your-path ","date":"2019-12-10","objectID":"/posts/virtual-pdf-printer/:0:2","tags":["pdf","printer"],"title":"PDF 虚拟打印机","uri":"/posts/virtual-pdf-printer/"},{"categories":null,"content":" 3 参考ArchWiki ","date":"2019-12-10","objectID":"/posts/virtual-pdf-printer/:0:3","tags":["pdf","printer"],"title":"PDF 虚拟打印机","uri":"/posts/virtual-pdf-printer/"},{"categories":null,"content":"大多数的数据库管理系统都是商业的，但作为一个重度的Linux使用者来说，开源的DBMS还是更有吸引力。之前一直使用的是 MySQL，但自从被Oracle 收购，就很让人揪心。好在子分支的 MariaDB 能够兼容 MySQL 的命令和操作，加上开源社区的支持力度，让我决定加入MariaDB 的阵营。 ","date":"2019-11-09","objectID":"/posts/mariadb/:0:0","tags":["mariadb"],"title":"开始使用 Mariadb","uri":"/posts/mariadb/"},{"categories":null,"content":" 1 两者异同迁移前总得先了解一下两者的异同，从网上搜集了一下资料，主要以下几点 1.1 使用情况自 1995 年以来，MySQL 一直被视为最广泛使用的开源数据库，而 MariaDB 在最近几年才渐渐得到几个主要巨头比如 Google 和 Linux 社区的赏识，我也是被 ArchLinux wiki 推介从而了解到这个 DBMS。 1.2 索引结构MariaDB 完全兼容 MySQL 的数据、表格定义、结构和 API，也就是说完全可以平滑的从 MySQL 过渡到 MariaDB 1.3 二进制实现MariaDB 除 C、和 C++ 外，还使用 Bash 和 Perl 1.4 复制与集群MariaDB 和 MySQL 为主终端用户提供与主从主复制和主从复制相同的复制和集群功能。但 MariaDB 还使用 10.1 版以后的 Galera Cluster。 1.5 支持MySQL 由 Oracle 的开发人员和工程师支持，MariaDB 由开源社区提供技术支持。 1.6 安全性就安全性而言，MySQL 为表空间数据提供了强大的加密机制。它提供了强大的安全参数，包括选择好的密码，不给用户不必要的特权，并通过防止SQL 注入和数据损坏来确保应用程序安全。MariaDB 在内部安全和密码检查，验证模块（PAM）和轻量级目录访问协议（LDAP）认证，Kerberos，用户角色以及对表空间，表格和日志的强大加密等安全功能方面取得了重大进展。 1.7 可扩展性MySQL 不支持，MariaDB 建立在现代架构的基础之上，可以在每一层 – 客户端，集群，内核和存储上进行扩展。这种可扩展性提供了两个主要优势。它允许通过插件实现持续的社区创新，这意味着可以通过 MariaDB 的可扩展架构集成各种存储引擎，如 MariaDB ColumnStore 或Facebook 的 MyRocks。此外，它使客户能够轻松配置 MariaDB 以支持从联机事务处理（OLTP）到联机分析处理（OLAP）的各种用例。 1.8 JSON支持MySQL 支持本地 JSON 数据类型，可以在 JSON（JavaScript Object Notation） 文档中高效地访问数据。MariaDB Server 10.2 引入了一整套用于读写 JSON 文档的 24 个函数。另外，JSON_VALID 函数可以与校验约束一起使用，而像 JSON_VALUE 这样的函数可以与动态列一起使用来索引特定的字段。 1.9 授权许可MySQL 在 GPL 下以开放源代码提供代码，并以 MySQL Enterprise 形式提供非 GPL 商业分发选项。MariaDB 只能使用 GPL，因为它的工作源于该许可条款下的 MySQL 源代码。 1.10 性能MariaDB 通过 MySQL 的许多创新实现了同类最佳性能。其中包括线程池管理以最大限度地提高处理效率，以及 InnoDB 数据存储区内的碎片整理等广泛的优化功能。因此，当从 InnoDB 表中删除行时，可用空间立即可供操作系统使用。不需要将旧表中的数据复制到新表中，并且表空间中没有空闲。MariaDB 还提供与引擎无关的表统计信息，以改善优化程序的性能，加快对表的大小和结构进行查询处理和数据分析。 ","date":"2019-11-09","objectID":"/posts/mariadb/:0:1","tags":["mariadb"],"title":"开始使用 Mariadb","uri":"/posts/mariadb/"},{"categories":null,"content":" 2 优缺点 2.1 优点 MariaDB 针对性能进行了优化，对于大型数据集，它比 MySQL 强大得多。从其他数据库系统可以优雅的迁移到 MariaDB 是另一个好处。 从 MySQL 切换到 MariaDB 相对容易，这对于系统管理员来说好像是一块蛋糕。 MariaDB 通过引入微秒级精度和扩展用户统计数据提供更好的监控。 MariaDB 增强了 KILL 命令，使您可以杀死用户的所有查询（KILL USER 用户名）或杀死查询ID（KILL QUERY ID query_id）。MariaDB 也转而使用 Perl 兼容的正则表达式（PCRE），它提供比标准 MySQL 正则表达式支持更强大和更精确的查询。 MariaDB 为与磁盘访问，连接操作，子查询，派生表和视图，执行控制甚至解释语句相关的查询应用了许多查询优化。 MariaDB 纯粹是开源的，而不是 MySQL 使用的双重授权模式。一些仅适用于 MySQL Enterprise 客户的插件在 MariaDB 中具有等效的开源实现。 与 MySQL 相比，MariaDB 支持更多的引擎（SphinxSE，Aria，FederatedX，TokuDB，Spider，ScaleDB等）。 MariaDB 提供了一个用于商业用途的集群数据库，它也支持多主复制。任何人都可以自由使用它，并且不需要依赖 MySQL Enterprise 系统。 2.2 缺点 从版本 5.5.36 开始，MariaDB 无法迁移回 MySQL。 对于 MariaDB 的新版本，相应的库（用于 Debian ）不会及时部署，由于依赖关系，这将导致必需升级到较新的版本。 MariaDB 的群集版本不是很稳定。 ","date":"2019-11-09","objectID":"/posts/mariadb/:0:2","tags":["mariadb"],"title":"开始使用 Mariadb","uri":"/posts/mariadb/"},{"categories":null,"content":" 3 开始使用 $ sudo pacman -S mariadb $ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql # init dir $ sudo systemctl start mariadb # or mysqld $ mysql-secure_installation # install instruction ","date":"2019-11-09","objectID":"/posts/mariadb/:0:3","tags":["mariadb"],"title":"开始使用 Mariadb","uri":"/posts/mariadb/"},{"categories":null,"content":" 参考 MariaDB与MySQL的区别 ","date":"2019-11-09","objectID":"/posts/mariadb/:0:4","tags":["mariadb"],"title":"开始使用 Mariadb","uri":"/posts/mariadb/"},{"categories":null,"content":" 人生如白驹过隙，相逢即是有缘！ Liolok 快乐的小皓奇，拥有非常多的卡哇伊贴纸，也很羡慕他的手办，同时还是next主题开发组成员 Losses Don 优秀的前端设计师（拥有心理学背景呦），很擅长制作PPT，而且博客的布局和控件设计很有参考价值 Asutorufa ArchLinux User一枚 Axionl 艾老师，笔名艾雨寒，ArchLinuxCN的优秀打包者之一，会很有耐心的帮助新人解决问题，本博客就是由他的博客启发而来 Lilydjwg 依云，昵称百合仙子，lilac的作者和维护者，拥有非常多的厉害脚本和工具，回答问题一针见血，渊博的学识和严谨的态度令人折服 Farseerfc FC教授，不是尊称，他真的是日本一所大学的教授，Archlinux TU之一，据说是能够背下Archwiki的男人 Brucezhang 一只可爱的兔子，因为是电子包维护最多的人也被叫做电子兔，这只兔子满嘴骚话 Hosxy 自称二次元死宅，很喜欢他设计的Fcitx5皮肤，超级好看，大家快去给star DuckSoft 一般叫他鸭鸭，是 qv2ray 的作者之一，已经是我每个系统必装的应用了，感谢他们的维护 AlynxZhou 周老师，很喜欢吹口琴，同时也是群里少数的 gnome 用户（被迫害 Vifly 群里著名炼丹师，当初 github action 打 arch 包还是向他学的 Oldherl 老海尔是群里 400 岁的老人了，同时还是人肉字体识别机，文泉驿的好几个字体他都有参与贡献。 Wgjak47 ak47 是老运维大师了，同时还是群里的政治大师，了解很多社科知识。 ","date":"2019-11-06","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":" 自我简述生长于江西这个道教福地，从小有着对于道教的孺慕之情，于是乎中二少年时期给自己取了个道号 “千玄子”，没成想一直沿用到了今天。 非常喜欢历史，由于时间原因也没有去找文言文原本去啃，大多是央视《中华通史》这种系列视频，当然一些有趣的野史会去翻原本考据。有兴趣的话可以一起探讨！当初为什么不选历史这个专业呢？还是要恰饭的嘛。 被动型人格拥有者，面对主动来和自己交谈的人会非常热情，但是对主动交谈常常会畏首畏尾，踌躇不前。非常担心未来能不能找到女朋友，目前在无尽的知识和神奇的代码陪伴中孤独度日。 坚定的ArchLinux使用者，自接触到Linux世界，陪伴我最长时间的还是ArchLinux，这个优雅的发行版就是有着这样神奇的魔力，仿佛包含一切的wiki为我彻底打开了新世界的大门。进入TG的群没多久，就感知到了各位打包志愿者的付出和广阔的知识体量，希望经过一段时间的学习也能成为其中一员，为开源世界做点贡献。 忘了说了，专业是CS，喜欢折腾各种电子设备，遇上新应用总是要在第一时间捏成自己喜欢的形状，尤其是 DE（这算是强迫症吗？），c/c++入的门，但偏偏喜欢python，因为课程设计的原因接触了java开发，但只做了一个小 demo 就没再玩了。为了捏一个简洁的博客尝试了 N 多主题，最后还是入了Hugo的坑，选了这个近乎于白板的主题（好吧，是因为它够简洁还有阴影效果），以后有需求了就给它改改刀，被迫把主题代码和官方文档狂翻的男人，感觉一段时间之后就能发一个新主题了（开玩笑的 喜欢轻音乐，以燃向和哀伤的调子为主，喜欢古风，西方的音乐较少听，下面开个小歌单，不定期更新: 1 镇命歌 祭祀之乐，哀婉且绵长 2 五月雨 永远的火影 3 潇湘子 红绳糯米今犹在，不见当年林正英！ ","date":"2019-11-06","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" 欢迎来找我玩耍 GPG: B3A9 251F BEA2 1298 B80B 7F9E F84D 36A7 3BF3 9DC8 Telegram: @zjuyk Email: Gmail | Edu ","date":"2019-11-06","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"}]